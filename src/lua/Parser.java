
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 13 12:48:09 BRST 2016
//----------------------------------------------------

package lua;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import lua.Lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 13 12:48:09 BRST 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\002\005" +
    "\000\002\010\003\000\002\003\005\000\002\003\003\000" +
    "\002\003\005\000\002\003\007\000\002\003\006\000\002" +
    "\003\007\000\002\003\010\000\002\003\011\000\002\003" +
    "\012\000\002\003\013\000\002\003\015\000\002\003\011" +
    "\000\002\003\005\000\002\003\006\000\002\003\004\000" +
    "\002\003\006\000\002\030\007\000\002\030\006\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\006\000\002\031\004" +
    "\000\002\031\005\000\002\005\004\000\002\005\003\000" +
    "\002\032\004\000\002\032\005\000\002\015\003\000\002" +
    "\015\006\000\002\015\005\000\002\012\004\000\002\012" +
    "\003\000\002\033\004\000\002\033\005\000\002\006\004" +
    "\000\002\006\003\000\002\034\004\000\002\034\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\005\000\002\011\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\005\000\002\007\004\000\002" +
    "\007\006\000\002\023\005\000\002\023\004\000\002\023" +
    "\003\000\002\023\003\000\002\017\004\000\002\024\003" +
    "\000\002\024\005\000\002\024\003\000\002\020\005\000" +
    "\002\020\004\000\002\025\005\000\002\025\004\000\002" +
    "\025\004\000\002\025\003\000\002\035\004\000\002\035" +
    "\005\000\002\026\007\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\032\002\000\005\014\007\004\010\024\012" +
    "\013\016\022\021\011\022\006\023\007\024\016\033\012" +
    "\063\010\001\002\000\036\021\036\027\041\030\050\031" +
    "\037\032\032\033\012\037\033\042\051\060\034\061\045" +
    "\062\042\063\010\066\053\067\043\001\002\000\016\002" +
    "\ufffe\006\ufffe\011\ufffe\014\ufffe\015\ufffe\064\245\001\002" +
    "\000\006\021\240\063\237\001\002\000\052\002\uffe8\006" +
    "\uffe8\011\uffe8\014\uffe8\015\uffe8\021\036\027\041\030\050" +
    "\031\037\032\032\033\012\037\033\042\051\060\034\061" +
    "\045\062\042\063\010\064\uffe8\066\053\067\043\001\002" +
    "\000\126\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc" +
    "\057\uffdc\062\uffdc\063\uffdc\064\uffdc\001\002\000\004\063" +
    "\224\001\002\000\036\021\036\027\041\030\050\031\037" +
    "\032\032\033\012\037\033\042\051\060\034\061\045\062" +
    "\042\063\010\066\053\067\043\001\002\000\036\021\036" +
    "\027\041\030\050\031\037\032\032\033\012\037\033\042" +
    "\051\060\034\061\045\062\042\063\010\066\053\067\043" +
    "\001\002\000\032\005\014\006\000\007\004\010\024\012" +
    "\013\016\022\021\011\022\006\023\007\024\016\033\012" +
    "\063\010\001\002\000\056\002\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\uffc4\026\uffc4\033" +
    "\ufff9\035\uffc4\037\uffc4\062\uffc4\063\ufff9\064\ufff9\001\002" +
    "\000\016\002\uffe6\006\uffe6\011\uffe6\014\uffe6\015\uffe6\064" +
    "\uffe6\001\002\000\016\025\063\026\061\033\055\035\060" +
    "\037\033\062\056\001\002\000\044\002\000\005\014\006" +
    "\000\007\004\010\024\011\000\012\013\014\000\015\000" +
    "\016\022\021\011\022\006\023\007\024\016\033\012\063" +
    "\010\064\170\001\002\000\022\004\uffdf\017\163\025\uffc5" +
    "\026\uffc5\033\uffc5\035\uffc5\037\uffc5\062\uffc5\001\002\000" +
    "\004\063\134\001\002\000\004\004\131\001\002\000\032" +
    "\005\014\007\004\010\024\011\000\012\013\016\022\021" +
    "\011\022\006\023\007\024\016\033\012\063\010\001\002" +
    "\000\004\002\026\001\002\000\004\002\001\001\002\000" +
    "\004\011\031\001\002\000\012\006\ufffb\011\ufffb\014\ufffb" +
    "\015\ufffb\001\002\000\036\021\036\027\041\030\050\031" +
    "\037\032\032\033\012\037\033\042\051\060\034\061\045" +
    "\062\042\063\010\066\053\067\043\001\002\000\114\002" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\026\uffcb\033\uffcb\034\uffcb\036\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\063\uffcb\064\uffcb\001\002\000\010\017" +
    "\124\040\127\064\126\001\002\000\036\021\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\037\uff9b\042\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\063\uff9b\066\uff9b\067\uff9b\001\002" +
    "\000\114\002\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\033\uffca\034" +
    "\uffca\036\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\063\uffca\064\uffca\001\002" +
    "\000\002\001\002\000\114\002\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026" +
    "\uffcf\033\uffcf\034\uffcf\036\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\063\uffcf" +
    "\064\uffcf\001\002\000\102\002\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\033\ufff6\041\075\042" +
    "\070\043\103\044\101\045\106\046\074\047\102\050\073" +
    "\051\100\052\105\053\077\054\071\055\110\056\072\057" +
    "\107\063\ufff6\064\ufff6\001\002\000\114\002\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\026\uffd1\033\uffd1\034\uffd1\036\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\063\uffd1\064\uffd1\001\002\000\114\002\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\026\uffcc\033\uffcc\034\uffcc\036\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\063\uffcc\064\uffcc\001\002\000\114\002\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\026\uffcd\033\uffcd\034\uffcd\036\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\063\uffcd\064\uffcd\001\002\000\124\002\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\001\002\000\036\021\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\037\uff9a\042\uff9a\060\uff9a\061\uff9a\062\uff9a" +
    "\063\uff9a\066\uff9a\067\uff9a\001\002\000\036\021\036\027" +
    "\041\030\050\031\037\032\032\033\012\037\033\042\051" +
    "\060\034\061\045\062\042\063\010\066\053\067\043\001" +
    "\002\000\114\002\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\063\uffc8\064\uffc8\001" +
    "\002\000\114\002\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\033\uffd0" +
    "\034\uffd0\036\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\057\uffd0\063\uffd0\064\uffd0\001" +
    "\002\000\036\021\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\037\uff9c\042\uff9c\060\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\066\uff9c\067\uff9c\001\002\000\124\002\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\063\026\061\033\055\034\uffc9\035\060\036" +
    "\uffc9\037\033\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\062\056\063\uffc9\064\uffc9" +
    "\001\002\000\114\002\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce\033" +
    "\uffce\034\uffce\036\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\063\uffce\064\uffce" +
    "\001\002\000\124\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\040\021" +
    "\036\027\041\030\050\031\037\032\032\033\012\034\115" +
    "\037\033\042\051\060\034\061\045\062\042\063\010\066" +
    "\053\067\043\001\002\000\124\002\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\062\uffbd\063\uffbd\064\uffbd\001\002" +
    "\000\124\002\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\001\002\000\036\021\036\027" +
    "\041\030\050\031\037\032\032\033\012\037\033\042\051" +
    "\060\034\061\045\062\042\063\010\066\053\067\043\001" +
    "\002\000\004\063\065\001\002\000\124\002\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\001\002\000\004\063\064\001\002\000\126\002\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\062\uffda\063" +
    "\uffda\064\uffda\001\002\000\010\033\055\037\033\062\056" +
    "\001\002\000\124\002\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\057\uffc1\062\uffc1\063\uffc1\064\uffc1\001\002\000\042\036" +
    "\104\041\075\042\070\043\103\044\101\045\106\046\074" +
    "\047\102\050\073\051\100\052\105\053\077\054\071\055" +
    "\110\056\072\057\107\001\002\000\036\021\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\037\uffaa\042\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\066\uffaa\067\uffaa\001\002" +
    "\000\036\021\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\037\uffa0\042\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\066\uffa0\067\uffa0\001\002\000\036\021\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\037\uff9e\042\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\066\uff9e\067\uff9e\001\002\000" +
    "\036\021\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\037\uffa2\042\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\066" +
    "\uffa2\067\uffa2\001\002\000\036\021\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\037\uffa6\042\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\066\uffa6\067\uffa6\001\002\000\036" +
    "\021\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\037" +
    "\uffab\042\uffab\060\uffab\061\uffab\062\uffab\063\uffab\066\uffab" +
    "\067\uffab\001\002\000\036\021\036\027\041\030\050\031" +
    "\037\032\032\033\012\037\033\042\051\060\034\061\045" +
    "\062\042\063\010\066\053\067\043\001\002\000\036\021" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\037\uffa3" +
    "\042\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\066\uffa3\067" +
    "\uffa3\001\002\000\036\021\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\037\uffa1\042\uffa1\060\uffa1\061\uffa1\062" +
    "\uffa1\063\uffa1\066\uffa1\067\uffa1\001\002\000\036\021\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\037\uffa8\042" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\066\uffa8\067\uffa8" +
    "\001\002\000\036\021\uffa5\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\037\uffa5\042\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\066\uffa5\067\uffa5\001\002\000\036\021\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\037\uffa9\042\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\066\uffa9\067\uffa9\001" +
    "\002\000\126\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\062\uffdb\063\uffdb\064\uffdb\001\002\000\036" +
    "\021\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\037" +
    "\uffa4\042\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\066\uffa4" +
    "\067\uffa4\001\002\000\036\021\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\037\uffa7\042\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\066\uffa7\067\uffa7\001\002\000\036\021" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\037\uff9d" +
    "\042\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\066\uff9d\067" +
    "\uff9d\001\002\000\036\021\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\037\uff9f\042\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\066\uff9f\067\uff9f\001\002\000\114\002\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\026\uffc7\033\uffc7\034\uffc7\036\uffc7\041" +
    "\075\042\070\043\103\044\101\045\106\046\074\047\102" +
    "\050\073\051\100\052\105\053\077\054\071\055\110\056" +
    "\072\057\107\063\uffc7\064\uffc7\001\002\000\004\034\121" +
    "\001\002\000\106\002\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\014\uffd4\015\uffd4\016\uffd4\017\120" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\033\uffd4\034\uffd4\041" +
    "\075\042\070\043\103\044\101\045\106\046\074\047\102" +
    "\050\073\051\100\052\105\053\077\054\071\055\110\056" +
    "\072\057\107\063\uffd4\064\uffd4\001\002\000\036\021\036" +
    "\027\041\030\050\031\037\032\032\033\012\037\033\042" +
    "\051\060\034\061\045\062\042\063\010\066\053\067\043" +
    "\001\002\000\124\002\uffbf\005\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\057\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\106\002" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\117\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\033\uffd5\034\uffd5\041\075\042\070\043\103" +
    "\044\101\045\106\046\074\047\102\050\073\051\100\052" +
    "\105\053\077\054\071\055\110\056\072\057\107\063\uffd5" +
    "\064\uffd5\001\002\000\036\021\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\037\uffd2\042\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\066\uffd2\067\uffd2\001\002\000\036\021" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\037\uffd3" +
    "\042\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\066\uffd3\067" +
    "\uffd3\001\002\000\124\002\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\062\uffc0\063\uffc0\064\uffc0\001\002\000\114" +
    "\002\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\026\uffc6\033\uffc6\034\uffc6\036" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\106\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\063\uffc6\064\uffc6\001\002\000\114" +
    "\002\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\026\uffbc\033\uffbc\034\uffbc\036" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\063\uffbc\064\uffbc\001\002\000\004" +
    "\040\uffad\001\002\000\004\040\130\001\002\000\004\040" +
    "\uffac\001\002\000\124\002\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002\000\124" +
    "\002\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\001\002\000\036\021\036\027\041\030" +
    "\050\031\037\032\032\033\012\037\033\042\051\060\034" +
    "\061\045\062\042\063\010\066\053\067\043\001\002\000" +
    "\044\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\016\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\033\ufffa\063\ufffa\064\ufffa\001\002\000\004" +
    "\020\156\001\002\000\010\004\137\017\135\020\uffd8\001" +
    "\002\000\004\063\155\001\002\000\052\002\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\153\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\033\uffd9\063\uffd9\064\uffd9\001\002\000" +
    "\036\021\036\027\041\030\050\031\037\032\032\033\012" +
    "\037\033\042\051\060\034\061\045\062\042\063\010\066" +
    "\053\067\043\001\002\000\042\026\141\041\075\042\070" +
    "\043\103\044\101\045\106\046\074\047\102\050\073\051" +
    "\100\052\105\053\077\054\071\055\110\056\072\057\107" +
    "\001\002\000\036\021\036\027\041\030\050\031\037\032" +
    "\032\033\012\037\033\042\051\060\034\061\045\062\042" +
    "\063\010\066\053\067\043\001\002\000\044\005\144\026" +
    "\143\041\075\042\070\043\103\044\101\045\106\046\074" +
    "\047\102\050\073\051\100\052\105\053\077\054\071\055" +
    "\110\056\072\057\107\001\002\000\036\021\036\027\041" +
    "\030\050\031\037\032\032\033\012\037\033\042\051\060" +
    "\034\061\045\062\042\063\010\066\053\067\043\001\002" +
    "\000\032\005\014\006\000\007\004\010\024\012\013\016" +
    "\022\021\011\022\006\023\007\024\016\033\012\063\010" +
    "\001\002\000\004\006\146\001\002\000\044\002\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\033" +
    "\ufff1\063\ufff1\064\ufff1\001\002\000\042\005\150\041\075" +
    "\042\070\043\103\044\101\045\106\046\074\047\102\050" +
    "\073\051\100\052\105\053\077\054\071\055\110\056\072" +
    "\057\107\001\002\000\032\005\014\006\000\007\004\010" +
    "\024\012\013\016\022\021\011\022\006\023\007\024\016" +
    "\033\012\063\010\001\002\000\004\006\152\001\002\000" +
    "\044\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\033\ufff0\063\ufff0\064\ufff0\001\002\000\004" +
    "\063\154\001\002\000\052\002\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\033\uffd6\063\uffd6\064\uffd6\001\002\000\052\002\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\033\uffd7\063\uffd7\064\uffd7\001" +
    "\002\000\036\021\036\027\041\030\050\031\037\032\032" +
    "\033\012\037\033\042\051\060\034\061\045\062\042\063" +
    "\010\066\053\067\043\001\002\000\004\005\160\001\002" +
    "\000\032\005\014\006\000\007\004\010\024\012\013\016" +
    "\022\021\011\022\006\023\007\024\016\033\012\063\010" +
    "\001\002\000\004\006\162\001\002\000\044\002\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\021\uffef\022\uffef\023\uffef\024\uffef\033" +
    "\uffef\063\uffef\064\uffef\001\002\000\006\033\012\063\010" +
    "\001\002\000\006\004\uffe0\017\165\001\002\000\006\033" +
    "\012\063\010\001\002\000\022\004\uffdd\017\uffdd\025\uffc5" +
    "\026\uffc5\033\uffc5\035\uffc5\037\uffc5\062\uffc5\001\002\000" +
    "\022\004\uffde\017\uffde\025\uffc5\026\uffc5\033\uffc5\035\uffc5" +
    "\037\uffc5\062\uffc5\001\002\000\042\002\000\005\014\006" +
    "\000\007\004\010\024\011\000\012\013\014\000\015\000" +
    "\016\022\021\011\022\006\023\007\024\016\033\012\063" +
    "\010\001\002\000\014\002\ufffd\006\ufffd\011\ufffd\014\ufffd" +
    "\015\ufffd\001\002\000\014\002\ufffc\006\ufffc\011\ufffc\014" +
    "\ufffc\015\ufffc\001\002\000\004\006\174\001\002\000\044" +
    "\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\033\ufff8\063\ufff8\064\ufff8\001\002\000\042\013" +
    "\176\041\075\042\070\043\103\044\101\045\106\046\074" +
    "\047\102\050\073\051\100\052\105\053\077\054\071\055" +
    "\110\056\072\057\107\001\002\000\036\005\014\006\000" +
    "\007\004\010\024\012\013\014\000\015\000\016\022\021" +
    "\011\022\006\023\007\024\016\033\012\063\010\001\002" +
    "\000\010\006\202\014\201\015\200\001\002\000\032\005" +
    "\014\006\000\007\004\010\024\012\013\016\022\021\011" +
    "\022\006\023\007\024\016\033\012\063\010\001\002\000" +
    "\036\021\036\027\041\030\050\031\037\032\032\033\012" +
    "\037\033\042\051\060\034\061\045\062\042\063\010\066" +
    "\053\067\043\001\002\000\044\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\033\ufff5\063\ufff5" +
    "\064\ufff5\001\002\000\010\006\206\014\204\015\205\001" +
    "\002\000\036\021\036\027\041\030\050\031\037\032\032" +
    "\033\012\037\033\042\051\060\034\061\045\062\042\063" +
    "\010\066\053\067\043\001\002\000\032\005\014\006\000" +
    "\007\004\010\024\012\013\016\022\021\011\022\006\023" +
    "\007\024\016\033\012\063\010\001\002\000\044\002\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\033\ufff4\063\ufff4\064\ufff4\001\002\000\004\006\210\001" +
    "\002\000\044\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\033\ufff2\063\ufff2\064\ufff2\001\002" +
    "\000\042\013\212\041\075\042\070\043\103\044\101\045" +
    "\106\046\074\047\102\050\073\051\100\052\105\053\077" +
    "\054\071\055\110\056\072\057\107\001\002\000\036\005" +
    "\014\006\000\007\004\010\024\012\013\014\000\015\000" +
    "\016\022\021\011\022\006\023\007\024\016\033\012\063" +
    "\010\001\002\000\010\006\uffea\014\uffea\015\uffea\001\002" +
    "\000\042\013\215\041\075\042\070\043\103\044\101\045" +
    "\106\046\074\047\102\050\073\051\100\052\105\053\077" +
    "\054\071\055\110\056\072\057\107\001\002\000\036\005" +
    "\014\006\000\007\004\010\024\012\013\014\000\015\000" +
    "\016\022\021\011\022\006\023\007\024\016\033\012\063" +
    "\010\001\002\000\010\006\uffe9\014\uffe9\015\uffe9\001\002" +
    "\000\004\006\220\001\002\000\044\002\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\033\ufff3\063" +
    "\ufff3\064\ufff3\001\002\000\042\034\222\041\075\042\070" +
    "\043\103\044\101\045\106\046\074\047\102\050\073\051" +
    "\100\052\105\053\077\054\071\055\110\056\072\057\107" +
    "\001\002\000\124\002\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000\002\001" +
    "\002\000\004\025\226\001\002\000\006\025\231\026\230" +
    "\001\002\000\004\063\227\001\002\000\006\025\uffe2\026" +
    "\uffe2\001\002\000\004\063\233\001\002\000\004\063\232" +
    "\001\002\000\006\025\uffe1\026\uffe1\001\002\000\002\001" +
    "\002\000\044\002\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\033\uffee\063\uffee\064\uffee\001\002" +
    "\000\016\002\uffe7\006\uffe7\011\uffe7\014\uffe7\015\uffe7\064" +
    "\uffe7\001\002\000\046\002\uffec\004\243\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\033\uffec\063\uffec" +
    "\064\uffec\001\002\000\050\002\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\135\021\uffd8\022\uffd8\023\uffd8\024\uffd8\033" +
    "\uffd8\063\uffd8\064\uffd8\001\002\000\004\063\241\001\002" +
    "\000\002\001\002\000\044\002\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\033\uffed\063\uffed\064" +
    "\uffed\001\002\000\036\021\036\027\041\030\050\031\037" +
    "\032\032\033\012\037\033\042\051\060\034\061\045\062" +
    "\042\063\010\066\053\067\043\001\002\000\044\002\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\033\uffeb\063\uffeb\064\uffeb\001\002\000\014\002\uffff\006" +
    "\uffff\011\uffff\014\uffff\015\uffff\001\002\000\042\005\247" +
    "\041\075\042\070\043\103\044\101\045\106\046\074\047" +
    "\102\050\073\051\100\052\105\053\077\054\071\055\110" +
    "\056\072\057\107\001\002\000\032\005\014\006\000\007" +
    "\004\010\024\012\013\016\022\021\011\022\006\023\007" +
    "\024\016\033\012\063\010\001\002\000\004\006\251\001" +
    "\002\000\044\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\033\ufff7\063\ufff7\064\ufff7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\020\002\024\003\017\004\004\005\022\007" +
    "\014\015\020\016\016\001\001\000\020\007\043\011\245" +
    "\015\053\016\051\017\034\020\046\022\045\001\001\000" +
    "\002\001\001\000\004\012\235\001\001\000\024\006\234" +
    "\007\043\011\112\015\053\016\051\017\034\020\046\022" +
    "\045\034\113\001\001\000\002\001\001\000\004\013\222" +
    "\001\001\000\020\007\043\011\220\015\053\016\051\017" +
    "\034\020\046\022\045\001\001\000\020\007\043\011\174" +
    "\015\053\016\051\017\034\020\046\022\045\001\001\000" +
    "\022\002\027\003\017\004\004\005\022\007\014\010\172" +
    "\015\020\016\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\061\023\056\001\001\000\020\002\170" +
    "\003\017\004\004\005\022\007\014\015\020\016\016\001" +
    "\001\000\004\032\163\001\001\000\004\012\132\001\001" +
    "\000\002\001\001\000\022\002\027\003\017\004\004\005" +
    "\022\007\014\010\026\015\020\016\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\043\011\037\015\053\016\051\017\034" +
    "\020\046\022\045\001\001\000\002\001\001\000\004\027" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\122\001\001\000\002\001\001\000\004\021\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\043\011" +
    "\121\015\053\016\051\017\034\020\046\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\061\023\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\111\007\043\011\112\015\053\016" +
    "\051\017\034\020\046\022\045\034\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\043\011\066\015" +
    "\053\016\051\017\034\020\046\022\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\061\023\065\001\001\000\002\001\001" +
    "\000\004\021\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\043\011\110\015\053\016" +
    "\051\017\034\020\046\022\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\075\001\001\000\002\001\001\000\004\021\075\001\001" +
    "\000\020\007\043\011\115\015\053\016\051\017\034\020" +
    "\046\022\045\001\001\000\002\001\001\000\004\021\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\131\007\043\011\112" +
    "\015\053\016\051\017\034\020\046\022\045\034\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\043\011\137\015\053\016\051\017\034\020\046\022\045" +
    "\001\001\000\004\021\075\001\001\000\020\007\043\011" +
    "\141\015\053\016\051\017\034\020\046\022\045\001\001" +
    "\000\004\021\075\001\001\000\020\007\043\011\146\015" +
    "\053\016\051\017\034\020\046\022\045\001\001\000\022" +
    "\002\027\003\017\004\004\005\022\007\014\010\144\015" +
    "\020\016\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\075\001\001\000\022\002\027\003\017\004" +
    "\004\005\022\007\014\010\150\015\020\016\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\156\007\043" +
    "\011\112\015\053\016\051\017\034\020\046\022\045\034" +
    "\113\001\001\000\002\001\001\000\022\002\027\003\017" +
    "\004\004\005\022\007\014\010\160\015\020\016\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\043" +
    "\015\166\016\016\001\001\000\002\001\001\000\010\007" +
    "\043\015\165\016\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\171\003\017\004\004\005\022\007" +
    "\014\015\020\016\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\075\001\001\000\022\002\027\003\017\004\004\005\022" +
    "\007\014\010\176\015\020\016\016\001\001\000\004\030" +
    "\202\001\001\000\022\002\027\003\017\004\004\005\022" +
    "\007\014\010\216\015\020\016\016\001\001\000\020\007" +
    "\043\011\213\015\053\016\051\017\034\020\046\022\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\043\011\210\015\053\016\051\017\034\020\046\022\045" +
    "\001\001\000\022\002\027\003\017\004\004\005\022\007" +
    "\014\010\206\015\020\016\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\075\001" +
    "\001\000\022\002\027\003\017\004\004\005\022\007\014" +
    "\010\212\015\020\016\016\001\001\000\002\001\001\000" +
    "\004\021\075\001\001\000\022\002\027\003\017\004\004" +
    "\005\022\007\014\010\215\015\020\016\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\075\001\001\000\002\001\001\000\004\014\233\001" +
    "\001\000\004\031\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\135\001" +
    "\001\000\002\001\001\000\004\014\241\001\001\000\002" +
    "\001\001\000\024\006\243\007\043\011\112\015\053\016" +
    "\051\017\034\020\046\022\045\034\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\075\001\001\000" +
    "\022\002\027\003\017\004\004\005\022\007\014\010\247" +
    "\015\020\016\016\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unop ::= HASHTAG 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unop ::= NOT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unop ::= MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unop",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binop ::= OR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binop ::= AND 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binop ::= APROX 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binop ::= EQUAL_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binop ::= SMALLER_THAN_OR_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= SMALLER_THAN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= GREATER_THAN_OR_EQUAL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= GREATER_THAN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= TWO_DOTS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= MOD 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop ::= EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= DIV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= TIMES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop ::= MINUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop ::= PLUS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // fieldesp ::= SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldesp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // fieldesp ::= COMMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldesp",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // field ::= exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // field ::= NAME EQUAL exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // field ::= L_BRACES exp R_BRACES EQUAL exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // q ::= q fieldesp field 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("q",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // q ::= fieldesp field 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("q",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fieldlist ::= field 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // fieldlist ::= field q 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fieldlist ::= field fieldesp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fieldlist ::= field q fieldesp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fieldlist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tableconstructor ::= L_BRACKETS R_BRACKETS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tableconstructor ::= L_BRACKETS fieldesp R_BRACKETS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tableconstructor",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parlist ::= THREE_DOTS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parlist ::= namelist COMMA THREE_DOTS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parlist ::= namelist 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parlist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function ::= FUNCTION funcbody 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= STRING 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= tableconstructor 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= L_PARENTHESIS R_PARENTHESIS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // args ::= L_PARENTHESIS explist R_PARENTHESIS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // functioncall ::= prefixexp COLON NAME args 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // functioncall ::= prefixexp args 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functioncall",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prefixexp ::= L_PARENTHESIS exp R_PARENTHESIS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prefixexp ::= functioncall 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prefixexp ::= var 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixexp",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= unop exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp binop exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= tableconstructor 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= prefixexp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= function 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= THREE_DOTS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= STRING 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= FLOAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= INTEGER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= TRUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= FALSE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= NIL 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // m ::= m exp COMMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // m ::= exp COMMA 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // explist ::= exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // explist ::= m exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("explist",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l ::= l COMMA NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // l ::= COMMA NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("l",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // namelist ::= NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // namelist ::= NAME l 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("namelist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= prefixexp DOT NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= prefixexp L_BRACES exp R_BRACES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // j ::= j COMMA var 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("j",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // j ::= COMMA var 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("j",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varlist ::= var 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varlist ::= var j 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varlist",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // h ::= h DOT NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // h ::= DOT NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("h",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcname ::= NAME h COLON NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcname ::= NAME h 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcname ::= NAME 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcname",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // laststat ::= BREAK 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // laststat ::= RETURN explist 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // laststat ::= RETURN 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("laststat",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // c ::= ELSEIF exp THEN block 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // c ::= c ELSEIF exp THEN block 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stat ::= LOCAL namelist EQUAL explist 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stat ::= LOCAL namelist 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL FUNCTION NAME funcbody 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= FUNCTION funcname funcbody 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= FOR namelist IN explist DO block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FOR NAME EQUAL exp COLON exp COLON exp DO block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FOR NAME EQUAL exp COLON exp DO block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= IF exp THEN block c ELSE block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= IF exp THEN block ELSE block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= IF exp THEN block c END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= IF exp THEN block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= REPEAT block UNTIL exp 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= WHILE exp DO block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= DO block END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat ::= functioncall 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat ::= varlist EQUAL explist 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stat",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= chunck 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // chunck ::= stat SEMICOLON chunck 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunck",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chunck ::= stat chunck 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunck",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunck ::= laststat 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunck",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunck ::= laststat SEMICOLON 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunck",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // chunck ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chunck",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= chunck EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

